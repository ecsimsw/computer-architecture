// MAIN 0x00
M R1 0x02       // SET INITIAL ARGUMENT_1
M R2 0x00       // SET INITIAL ARGUMENT_2
M R9 0xFF       // SET INITIAL STACK_POINTER
JAL R8 0x08     // JUMP to GCD
H 0x00 0x00

// GCD 0x08
- R9 0x04
M R9 R0         // SP = SP-4
+ R9 0x01
M R9 R0         // SP = SP+1
SW R8 R9        // M[SP] = RA
+ R9 0x01
M R9 R0         // SP = SP+1
SW R1 R9        // M[SP] = R1
+ R9 0x01
M R9 R0         // SP = SP+1
SW R2 R9        // M[SP] = R2
+ R9 0x01
M R9 R0         // SP = SP+1
- R9 0x04
M R9 R0         // SP = SP-4
M R0 R2
BEQ 0x00 0x22   // IF(R2 == 0) JUMP to EXIT
J 0x1B 0x00     // JUMP to FALSE

// FALSE 0x1B
% R1 R2
M R3 R0         // R3 = R1 % R2
M R1 R2         // R1 = R2
M R2 R3         // R2 = R3
JAL R8 0x08     // JUMP to GCD

// EXIT 0x22
+ R9 0x04
M R9 R0         // SP = SP+4
- R9 0x01
M R9 R0         // SP = SP-1
LW R9 0x00
M R1 R0         // A1 = M[SP]
- R9 0x01
M R9 R0         // SP = SP-1
LW R9 0x00
M R2 R0         // A2 = M[SP]
- R9 0x01
M R9 R0         // SP = SP-1
LW R9 0x00
M R8 R0         // RA = M[SP]
JAL R8 R8       // JUMP to RA
