// MAIN 0x00
M R1 0x23       // SET INITIAL ARGUMENT_1
M R2 0x19       // SET INITIAL ARGUMENT_2
M R9 0xFF       // SET INITIAL STACK_POINTER
JAL R8 0x07     // JUMP to GCD
H 0x00 0x00

// GCD 0x07
- R9 0x04
M R9 R0         // SP = SP-4
SW R8 R9        // M[SP] = RA
+ R9 0x01
SW R1 R0        // M[SP+1] = R1
+ R9 0x02
SW R2 R0        // M[SP+2] = R2
+ R9 0x03
M R7 R1         // V0 = R1
SW R7 R0        // M[SP+3] = V0
M R0 R2
BEQ 0x00 0x1D   // IF(R2 == 0) JUMP to EXIT
J 0x16 0x00     // JUMP to FALSE

// FALSE 0x16
% R1 R2
M R3 R0         // R3 = R1 % R2
M R1 R2         // R1 = R2
M R2 R3         // R2 = R3
JAL R8 0x08     // JUMP to GCD

// EXIT 0x1D
+ R9 0x04
M R9 R0         // SP = SP+4
- R9 0x02
LW R0 0x00
M R2 R0         // R2 = M[SP-2]
- R9 0x03
LW R0 0x00
M R1 R0         // R1 = M[SP-3]
- R9 0x04
LW R0 0x00
M R8 R0         // RA = M[SP-4]
J R8 0x00       // JUMP to RA
